name: Execute Tests Based on Excel Tags

on:
  workflow_dispatch:
  push:
    paths:
      - 'tag-priority.xlsx'

permissions:
  contents: write

jobs:
  extract-tags:
    runs-on: ubuntu-latest
    outputs:
      extracted: ${{ steps.extract.outputs.done }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "github-actions[bot]"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          npm ci
          npm install xlsx --save-dev
          sudo apt-get install jq

      - name: Extract tags from Excel
        id: extract
        run: |
          node -e "
            const fs = require('fs');
            const xlsx = require('xlsx');
            const workbook = xlsx.readFile('./tag-priority.xlsx');
            const sheet = workbook.Sheets[workbook.SheetNames[0]];
            const data = xlsx.utils.sheet_to_json(sheet, { header: 1 });

            const tags = [];
            for (let i = 1; i < data.length; i++) {
              const cell = (data[i][0] || '').toString().trim();
              if (!cell) continue;
              const rawTag = cell.startsWith('[') ? cell : '[' + cell + ']';
              const escapedTag = rawTag.replace(/\[/g, '\\\\[').replace(/\]/g, '\\\\]');
              tags.push({ raw: rawTag, escaped: escapedTag });
            }

            if (tags.length === 0) {
              console.error(' No valid tags found in Excel!');
              process.exit(1);
            }

            fs.writeFileSync('tag_list.json', JSON.stringify(tags, null, 2));
          "

      - name: Upload tag list for jobs
        uses: actions/upload-artifact@v4
        with:
          name: tag_list
          path: tag_list.json

  run-frame3:
    name: Run [FRAME3]
    needs: extract-tags
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - uses: actions/download-artifact@v4
        with:
          name: tag_list
      - name: Execute Tag [FRAME3]
        run: |
          TAG=$(jq -r '.[] | select(.raw=="[FRAME3]") | .escaped' tag_list.json)
          npx wdio run ./wdio.conf.ts --mochaOpts.grep="$TAG" | tee output_frame3.log
          EXIT_CODE=$?
          if grep -q '0 passed' output_frame3.log || [ $EXIT_CODE -ne 0 ]; then
            echo "❌ Failed or no tests matched tag: [FRAME3]"
          else
            echo "✅ [FRAME3] executed successfully"
          fi

  run-frame:
    name: Run [FRAME]
    needs: run-frame3
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - uses: actions/download-artifact@v4
        with:
          name: tag_list
      - name: Execute Tag [FRAME]
        run: |
          TAG=$(jq -r '.[] | select(.raw=="[FRAME]") | .escaped' tag_list.json)
          npx wdio run ./wdio.conf.ts --mochaOpts.grep="$TAG" | tee output_frame.log
          EXIT_CODE=$?
          if grep -q '0 passed' output_frame.log || [ $EXIT_CODE -ne 0 ]; then
            echo "❌ Failed or no tests matched tag: [FRAME]"
          else
            echo "✅ [FRAME] executed successfully"
          fi

  run-frame2:
    name: Run [FRAME2]
    needs: run-frame
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - uses: actions/download-artifact@v4
        with:
          name: tag_list
      - name: Execute Tag [FRAME2]
        run: |
          TAG=$(jq -r '.[] | select(.raw=="[FRAME2]") | .escaped' tag_list.json)
          npx wdio run ./wdio.conf.ts --mochaOpts.grep="$TAG" | tee output_frame2.log
          EXIT_CODE=$?
          if grep -q '0 passed' output_frame2.log || [ $EXIT_CODE -ne 0 ]; then
            echo "❌ Failed or no tests matched tag: [FRAME2]"
          else
            echo "✅ [FRAME2] executed successfully"
          fi

  run-frame9:
    name: Run [FRAME9]
    needs: run-frame2
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - uses: actions/download-artifact@v4
        with:
          name: tag_list
      - name: Execute Tag [FRAME9]
        run: |
          TAG=$(jq -r '.[] | select(.raw=="[FRAME9]") | .escaped' tag_list.json)
          npx wdio run ./wdio.conf.ts --mochaOpts.grep="$TAG" | tee output_frame9.log
          EXIT_CODE=$?
          if grep -q '0 passed' output_frame9.log || [ $EXIT_CODE -ne 0 ]; then
            echo "❌ Failed or no tests matched tag: [FRAME9]"
          else
            echo "✅ [FRAME9] executed successfully"
          fi

  run-ck:
    name: Run [CK]
    needs: run-frame9
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - uses: actions/download-artifact@v4
        with:
          name: tag_list
      - name: Execute Tag [CK]
        run: |
          TAG=$(jq -r '.[] | select(.raw=="[CK]") | .escaped' tag_list.json)
          npx wdio run ./wdio.conf.ts --mochaOpts.grep="$TAG" | tee output_ck.log
          EXIT_CODE=$?
          if grep -q '0 passed' output_ck.log || [ $EXIT_CODE -ne 0 ]; then
            echo "❌ Failed or no tests matched tag: [CK]"
          else
            echo "✅ [CK] executed successfully"
          fi

  run-mac:
    name: Run [MAC]
    needs: run-ck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - uses: actions/download-artifact@v4
        with:
          name: tag_list
      - name: Execute Tag [MAC]
        run: |
          TAG=$(jq -r '.[] | select(.raw=="[MAC]") | .escaped' tag_list.json)
          npx wdio run ./wdio.conf.ts --mochaOpts.grep="$TAG" | tee output_mac.log
          EXIT_CODE=$?
          if grep -q '0 passed' output_mac.log || [ $EXIT_CODE -ne 0 ]; then
            echo "❌ Failed or no tests matched tag: [MAC]"
          else
            echo "✅ [MAC] executed successfully"
          fi

  cleanup:
    name: Final Cleanup
    needs: run-mac
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cleanup uploaded Excel
        run: |
          git rm -f tag-priority.xlsx || true
          git commit -m "Remove tag-priority.xlsx post execution" || echo "Nothing to commit"
          git push origin || echo "Nothing to push"

      - name: Final cleanup of local temp files
        run: |
          rm -f tag_list.json output_*.log

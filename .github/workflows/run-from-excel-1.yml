name: Execute Tests Dynamically
 
on:
  push:
    paths:
      - 'tag-priority.xlsx'
 
permissions:
  contents: write
 
jobs:
  extract-tags:
    name: Run Test Scripts Sequentially based on Excel hierarchy
    runs-on: ubuntu-22.04
    env:
      NODE_VERSION: 18.x
      # ORG: sit
    #   TEST_RAIL_USERNAME: ${{ secrets.TEST_RAIL_USERNAME }}
    #   TEST_RAIL_PASSWORD: ${{ secrets.TEST_RAIL_PASSWORD }}
    outputs:
      tag_list: ${{ steps.extract.outputs.tag_list }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
 
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
 
      - name: Install dependencies
        run: |
          npm install
          npm install xlsx --save-dev
          sudo apt-get install jq
 
 
      - name: Extract and format tag list
        id: extract
        run: |
          node -e "
            const fs = require('fs');
            const xlsx = require('xlsx');
            const workbook = xlsx.readFile('./tag-priority.xlsx');
            const sheet = workbook.Sheets[workbook.SheetNames[0]];
            const data = xlsx.utils.sheet_to_json(sheet, { header: 1 });
 
            const tags = [];
            for (let i = 1; i < data.length; i++) {
              const cell = (data[i][0] || '').toString().trim();
              if (!cell) continue;
              const rawTag = cell.startsWith('[') ? cell : '[' + cell + ']';
              tags.push(rawTag);
            }
 
            if (tags.length === 0) {
              console.error(' No valid tags found in Excel!');
              process.exit(1);
            }
            console.log(' Tags Extracted:', tags);
            fs.writeFileSync('tags.json', JSON.stringify(tags));
          "
 
          TAG_LIST=$(jq -c . tags.json)
          echo "tag_list=$TAG_LIST" >> $GITHUB_OUTPUT
 
  run-tests:
    name: Run Tests for Each Tag
    needs: extract-tags
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        tag: ${{ fromJSON(needs.extract-tags.outputs.tag_list) }}
 
    steps:
      - uses: actions/checkout@v4
 
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
 
      - name: Install project dependencies
        run: npm ci
        
      # - name: Decode ORG_CREDENTIALS and move
      #   run: |
      #     echo "${{ secrets.ORG_CREDENTIALS }}" | base64 --decode > users.ts
      #     mv users.ts test/config/
      #     ls -l test/config/  # Debug step to confirm file presence
 
      - name: Run tests for tag ${{ matrix.tag }}
        run: |
          ESCAPED=$(echo '${{ matrix.tag }}' | sed 's/\[/\\[/g; s/\]/\\]/g')
          echo "==============================="
          echo "Running tests for: ${{ matrix.tag }}"
          echo "Escaped grep: $ESCAPED"
          echo "==============================="
 
          export HEADLESS=true
          export SCHEDULED_RUN=false
          export ORG=${{ env.ORG }}
          export TEST_RAIL_USERNAME=${{ env.TEST_RAIL_USERNAME }}
          export TEST_RAIL_PASSWORD=${{ env.TEST_RAIL_PASSWORD }}
 
          npx wdio ./wdio.conf.ts --mochaOpts.grep="$ESCAPED" | tee test_${{ matrix.tag }}.log
 
          EXIT_CODE=$?
          if grep -q '0 passed' test_${{ matrix.tag }}.log || [ $EXIT_CODE -ne 0 ]; then
            echo " [${{ matrix.tag }}] failed or no tests matched"
            exit 1
          else
            echo "[${{ matrix.tag }}] passed successfully"
          fi
      # - name: Upload Allure Report
      #   uses: actions/upload-artifact@v4
      #   if: always()
      #   with:
      #       name: ${{ matrix.tag }}_Report
      #       path: allure-results/
 
  cleanup:
    name: Final Cleanup
    needs: run-tests
    runs-on: ubuntu-latest
    if: always()  
    steps:
      - uses: actions/checkout@v4
 
      - name: Set Git Identity
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "github-actions[bot]"
 
      - name: Cleanup Excel
        run: |
          git rm -f tag-priority.xlsx || true
          git commit -m "Cleanup after run" || echo "Nothing to commit"
          git push origin || echo "Nothing to push"